// MPI transport daemon that handles network communications.

/**
 * This assumes one process per host, which handles all network communications.
 * The daemon is responsible for mapping host to MPI rank and translate
 *  standard UNIX socket calls like send() and recv() to MPI function calls.
 *  These calls will be encoded as messages sent throughput UNIX domain socket,
 *  generated by the syscall interceptor.
 */

#ifndef _GNU_SOURCE
#define _GNU_SOURCE
#endif

#include <errno.h>
#include <inttypes.h>
#include <mpi.h>
#include <signal.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>

#include <map>
#include <vector>

#include <arpa/inet.h>
#include <netdb.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/un.h>

#define USE_PTHREAD 1

#include "dccs_config.h"
#include "lib/logging.h"
#include "dccs_message.h"
#include "dccs_utils.h"

#include "connection_manager.h"
#include "ipc_server.h"
#include "mpi_server.h"

using namespace std;


/* @section: Generic global variables */

MPI_Datatype MPI_struct_request, MPI_struct_response;

int mpi_rank, mpi_size;
static volatile bool signaled = false;


/* @section: Generic helper functions */

// Register structs as MPI data types.
int InitializeMPIDataTypes() {
    int rv;

    log_verbose("Initializing MPI struct types ...\n");

    // Initialize MPI struct for MPIRequest
    {
        const int numitems = 3;
        int blocklengths[numitems] = { 1, 1, 1 };
        MPI_Datatype types[numitems] = {
            MPI_UINT16_T,
            MPI_UINT16_T,
            MPI_UINT8_T,
        };
        MPI_Aint offsets[numitems] = {
            offsetof(struct MPIRequest, src_port),
            offsetof(struct MPIRequest, dst_port),
            offsetof(struct MPIRequest, operation),
        };
        rv = MPI_Type_create_struct(numitems, blocklengths, offsets, types,
                                    &MPI_struct_request);
        errif_return(rv, "Failed to create MPI struct MPIRequest.\n");
        rv = MPI_Type_commit(&MPI_struct_request);
        errif_return(rv, "Failed to commit MPI struct mpi_req_hader.\n");
    }

    // Initialize MPI struct for MPIResponse
    {
        const int numitems = 4;
        int blocklengths[numitems] = { 1, 1, 1, 1 };
        MPI_Datatype types[numitems] = {
            MPI_UINT16_T,
            MPI_UINT16_T,
            MPI_UINT8_T,
            MPI_UINT8_T,
        };
        MPI_Aint offsets[numitems] = {
            offsetof(struct MPIResponse, src_port),
            offsetof(struct MPIResponse, dst_port),
            offsetof(struct MPIResponse, operation),
            offsetof(struct MPIResponse, status),
        };
        rv = MPI_Type_create_struct(numitems, blocklengths, offsets, types,
                                    &MPI_struct_response);
        errif_return(rv, "Failed to create MPI struct MPIResponse.\n");
        rv = MPI_Type_commit(&MPI_struct_response);
        errif_return(rv, "Failed to commit MPI struct mpi_resp_hader.\n");
    }

    log_verbose("Initialized MPI struct types.\n");
    return 0;
}

// ctrl-c signal handler
void sigint_handler(int arg) {
    log_debug("sigint_handler | Caught signal SIGINT.\n");
    signaled = true;
    unlink(SERVER_PATH);    // TODO: remove after clean shutdown is done
}


/* @section: Main functions */

int run(int size, int rank) {
    int rv;

#if DEBUG_GDB
    if (rank == 0) {
        volatile bool wait = true;
        while (wait)
            sleep(1);
    }
#endif

    log_verbose("run | Start\n");

    MPIServer mpid(size, rank);
    IPCServer ipcd(&mpid);

    rv = mpid.Start();
    errif_return(rv, "Failed to initialize MPI daemon.\n");

//    rv = init_probe_server(size, rank);
//    errif_return(rv, "Failed to initialize probe server.\n");

    rv = ipcd.Start();   // Should block
    errif_return(rv, "Failed to run IPC server.\n");

    mpid.Stop();
    ipcd.Stop();

    log_verbose("run | End\n");
    return rv;
}

void pre_mpi_init() {
    srand(static_cast<unsigned int>(time(NULL)));

    // TODO: this is not working yet.
    // MPI translates SIGINT to SIGTERM for child processes
    if (SIG_ERR == signal(SIGTERM, sigint_handler)) {
        log_warning("Failed to register SIGINT handler.\n");
    }
}

void post_mpi_init() {
    InitializeMPIDataTypes();
}

void mpi_init(int argc, char *argv[], int &size, int &rank) {
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    mpi_rank = rank;
    mpi_size = size;
    log_verbose("MPI initialize: size = %d, rank = %d.\n", size, rank);
}

void mpi_finalize() {
    MPI_Finalize();
    log_verbose("MPI finalized.\n");
}

int main(int argc, char *argv[]) {
    int size, rank, rv;

    pre_mpi_init();
    mpi_init(argc, argv, size, rank);
    post_mpi_init();

    rv = run(size, rank);

    mpi_finalize();

    return rv;
}

